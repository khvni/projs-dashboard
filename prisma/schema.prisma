// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Project {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Basic Information
  name          String
  description   String?  @db.Text
  slug          String   @unique

  // Project Details
  status        ProjectStatus @default(PLANNING)
  priority      Priority @default(MEDIUM)
  percentComplete Int @default(0) // 0-100

  // Dates
  startDate     DateTime?
  endDate       DateTime?
  actualEndDate DateTime?

  // Visibility
  isPublic      Boolean @default(false) // Public-facing dashboard

  // Metadata
  category      ProjectCategory
  country       String? // Malaysia, New Zealand, etc.
  budget        Decimal? @db.Decimal(12, 2)
  actualCost    Decimal? @db.Decimal(12, 2)

  // Media
  coverImage    String?
  gallery       String[] // Array of image URLs

  // Relationships
  tasks         Task[]
  milestones    Milestone[]
  updates       ProjectUpdate[]
  assignments   ProjectAssignment[]
  beneficiaries ProjectBeneficiary[]
  volunteers    ProjectVolunteer[]

  createdBy     User   @relation("ProjectCreator", fields: [createdById], references: [id])
  createdById   String

  projectManager User?  @relation("ProjectManager", fields: [projectManagerId], references: [id])
  projectManagerId String?

  // Tags
  tags          String[] // ["urgent", "donor-funded", "ramadan-2024"]

  @@index([status])
  @@index([category])
  @@index([slug])
  @@index([isPublic])
}

model Task {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  title         String
  description   String?  @db.Text
  status        TaskStatus @default(TODO)
  priority      Priority @default(MEDIUM)

  // Task Details
  percentComplete Int @default(0) // 0-100
  estimatedHours Decimal? @db.Decimal(6, 2)
  actualHours    Decimal? @db.Decimal(6, 2)

  // Dates
  dueDate       DateTime?
  completedAt   DateTime?

  // Position (for kanban drag-and-drop)
  position      Int @default(0)
  columnId      String? // "todo", "in-progress", "done"

  // Relationships
  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String

  assignedTo    User?   @relation("TaskAssignee", fields: [assignedToId], references: [id])
  assignedToId  String?

  createdBy     User    @relation("TaskCreator", fields: [createdById], references: [id])
  createdById   String

  parentTask    Task?   @relation("SubTasks", fields: [parentTaskId], references: [id])
  parentTaskId  String?
  subTasks      Task[]  @relation("SubTasks")

  comments      TaskComment[]
  attachments   TaskAttachment[]

  milestone     Milestone? @relation(fields: [milestoneId], references: [id])
  milestoneId   String?

  @@index([projectId])
  @@index([status])
  @@index([assignedToId])
  @@index([milestoneId])
  @@index([columnId, position])
}

model Milestone {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  name          String
  description   String?  @db.Text
  dueDate       DateTime?
  completedAt   DateTime?
  status        MilestoneStatus @default(PENDING)

  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String

  tasks         Task[]

  @@index([projectId])
  @@index([status])
}

model ProjectUpdate {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  title         String
  content       String   @db.Text
  type          UpdateType @default(GENERAL)

  // Visibility
  isPublic      Boolean @default(false) // Show on public dashboard

  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String

  author        User    @relation(fields: [authorId], references: [id])
  authorId      String

  images        String[] // Array of image URLs

  @@index([projectId])
  @@index([isPublic])
  @@index([createdAt])
}

model ProjectAssignment {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())

  role          String // "Project Manager", "Team Lead", "Contributor"

  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String

  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
}

model ProjectBeneficiary {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())

  // Link to beneficiary system
  beneficiaryId String
  beneficiaryName String // Cached for display

  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String

  impact        String? @db.Text // How this beneficiary was impacted

  @@index([projectId])
  @@index([beneficiaryId])
}

model ProjectVolunteer {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())

  // Link to volunteer system
  volunteerId   String
  volunteerName String // Cached for display

  project       Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId     String

  hoursContributed Decimal? @db.Decimal(6, 2)

  @@index([projectId])
  @@index([volunteerId])
}

model TaskComment {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  content       String   @db.Text

  task          Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String

  author        User    @relation(fields: [authorId], references: [id])
  authorId      String

  @@index([taskId])
}

model TaskAttachment {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())

  name          String
  url           String
  size          Int      // bytes
  mimeType      String

  task          Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId        String

  uploadedBy    User    @relation(fields: [uploadedById], references: [id])
  uploadedById  String

  @@index([taskId])
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String
  role          UserRole
  organization  String?
  phone         String?
  avatar        String?

  // Relations
  createdProjects Project[] @relation("ProjectCreator")
  managedProjects Project[] @relation("ProjectManager")
  assignments   ProjectAssignment[]
  assignedTasks Task[]    @relation("TaskAssignee")
  createdTasks  Task[]    @relation("TaskCreator")
  updates       ProjectUpdate[]
  comments      TaskComment[]
  attachments   TaskAttachment[]

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  BLOCKED
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectCategory {
  HOMELESS_CARE
  FOOD_DISTRIBUTION
  SHELTER_SERVICES
  EDUCATION
  HEALTHCARE
  DISASTER_RELIEF
  COMMUNITY_DEVELOPMENT
  INFRASTRUCTURE
  OTHER
}

enum UpdateType {
  GENERAL
  MILESTONE
  ACHIEVEMENT
  CHALLENGE
  FINANCIAL
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  PROJECT_MANAGER
  TEAM_MEMBER
  STAKEHOLDER
}
